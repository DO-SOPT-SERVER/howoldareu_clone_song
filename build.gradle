plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.0'
	id 'io.spring.dependency-management' version '1.1.4'
	id 'jacoco'
}

group = 'com.sopt'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.mysql:mysql-connector-j'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'

	implementation group: 'com.google.code.gson', name: 'gson', version: '2.8.7'

	runtimeOnly 'com.h2database:h2'

}

tasks.named('test') {
	useJUnitPlatform()
	finalizedBy jacocoTestCoverageVerification

	jacoco {
		excludes += ["com/sopt/Server/controller/response/**",
					 "com/sopt/Server/exception/Success.class",
					 "com/sopt/Server/common/ApiResponse.class",
					 "com/sopt/Server/controller/request/**",
					"com/sopt/Server/exception/model/**",
					"com/sopt/Server/ServerApplication.class"]
	}
}

jacoco {
	toolVersion = '0.8.7'
}

jacocoTestReport {
	reports {
		xml.required.set(true)
		csv.required.set(true)
		html.required.set(true)
	}

	afterEvaluate {
		classDirectories.setFrom(
				files(classDirectories.files.collect {
					fileTree(dir: it, excludes: [
							"com/sopt/Server/controller/response/**",
							"com/sopt/Server/exception/Success.class",
							"com/sopt/Server/common/ApiResponse.class",
							"com/sopt/Server/controller/request/**",
							"com/sopt/Server/exception/model/**",
							"com/sopt/Server/ServerApplication.class"
					])
				})
		)
	}
}

jacocoTestCoverageVerification {
	violationRules {
		rule {
			// ...

			excludes = [
					'*.*Application',
					'*.*Exception',
					'*.DTO',
					'*.response'
					// ...
			]
		}
	}
}